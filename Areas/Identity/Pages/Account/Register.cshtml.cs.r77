using Ecommerce.Models;
using Microsoft.AspNet.Identity;
using Microsoft.AspNet.Identity.Owin;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using SendGrid;
using SendGrid.Helpers.Mail;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Net;
using System.Text.Encodings.Web;
using System.Threading.Tasks;


namespace Ecommerce.Areas.Identity.Pages.Account
{
    public class RegisterModel : PageModel
    {
        /* public class EmailService : IIdentityMessageService
         {
             public async Task SendAsync(IdentityMessage message)
             {
                 await ConfigSendGridasync(message);
             }

             // Use NuGet to install SendGrid (Basic C# client lib) 
             private async Task ConfigSendGridasync(IdentityMessage message)
             {
                 var myMessage = new SendGridMessage();
                 myMessage.AddTo(message.Destination);
                 myMessage.SetFrom(new EmailAddress("ilir.gashi@smart-tech.al", "Email Confirmation"));
                 myMessage.Subject = message.Subject;

                 myMessage.HtmlContent = message.Body;

                  var credentials = new NetworkCredential(
                             "ilir.gashi@smart-tech.al",
                             "Borus4mars2017"
                             );

                 //var credentials = new NetworkCredential("SendGrid_Username", "SendGrid_Password");

                 // Create a Web transport for sending email.
                 var transportWeb = new Web(credentials);

                 // Send the email.

                     await transportWeb.DeliverAsync(myMessage);


             }
         }*/

        private readonly IConfiguration _configuration;
        private readonly Microsoft.AspNetCore.Identity.UserManager<Utenti> _userManager;
        private readonly SignInManager<Utenti> _signInManager;
        private readonly IEmailSender _emailSender;
        private readonly ILogger _logger;

        public RegisterModel(
            Microsoft.AspNetCore.Identity.UserManager<Utenti> userManager,
            SignInManager<Utenti> signInManager,
            IEmailSender emailSender,
            ILogger<RegisterModel> logger,
            IConfiguration configuration)

        {
            _userManager = userManager;
            _signInManager = signInManager;
            _emailSender = emailSender;
            _logger = logger;
            _configuration = configuration;
        }

        [BindProperty]
        public InputModel Input { get; set; }

        public string ReturnUrl { get; set; }

        [TempData]
        public string ErrorMessage { get; set; }


        public class InputModel
        {
            [Required]
            [DataType(DataType.Text)]
            [Display(Name = "Full name")]
            public string Name { get; set; }


            [Required]
            [EmailAddress]
            [Display(Name = "Email")]
            public string Email { get; set; }

            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
            [DataType(DataType.Password)]
            [Display(Name = "Password")]
            public string Password { get; set; }

            [DataType(DataType.Password)]
            [Display(Name = "Confirm password")]
            [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
            public string ConfirmPassword { get; set; }
        }

        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            //returnUrl = returnUrl ?? Url.Content("~/");
            if (ModelState.IsValid)
            {
                var user = new Utenti(Input.Email)
                {

                    // Email = Input.Email
                };
                user.Email = Input.Email;

                var result = await _userManager.CreateAsync(user, Input.Password);
                if (result.Succeeded)
                {
                    _logger.LogInformation("User created a new account with password.");

                    var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                    var callbackUrl = Url.Page(
                        "/Account/ConfirmEmail",
                        pageHandler: null,
                        values: new { userId = user.Id, code = code },
                        protocol: Request.Scheme);

                    await _emailSender.SendEmailAsync(Input.Email, "Confirm your email",
                        $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");
                    //var apiKey = System.Environment.GetEnvironmentVariable("SENDGRID_APIKEY");
                    var apiKey = _configuration.GetSection("SENDGRID_APIKEY").Value;
                    var client = new SendGridClient(apiKey);
                    //var client = new SendGridClient("IGI-FADFGHJDMNOPFEWXMY", "https://api.sendgrid.com");
                    var from = new EmailAddress("ilir.gashi@smart-tech.al", "Confirm Email");
                    List<EmailAddress> tos = new List<EmailAddress>
                      {
                       new EmailAddress(Input.Email)

                       };

                    var subject = "Confirm your email";
                    var htmlContent = $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.";

                    var msg = MailHelper.CreateSingleEmailToMultipleRecipients(from, tos, subject, "", htmlContent, false);
                    var response = await client.SendEmailAsync(msg);


                   

                    // await _signInManager.SignInAsync(user, isPersistent: false);

                    //_logger.Message = "Check your email and confirm your account, you must be confirmed "
                    //   + "before you can log in.";



                    //return Page();
                    return Redirect("/Identity/Account/ConfirmEmail");
                    //LocalRedirect(returnUrl);
                }
                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }
            }

            // If we got this far, something failed, redisplay form
            return Page();
        }
    }
}